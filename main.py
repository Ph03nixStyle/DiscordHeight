import time
import json
from PIL import Image
from io import BytesIO
from selenium import webdriver
from selenium.webdriver.chrome.options import Options


"""
POUR AJOUTER UNE NOUVELLE PERSONNE
Il faut: Ajouter la personne dans le JSON, sachant qu'il faut faire une nouvelle page toutes les 10 personnes
Ensuite, il faut ajouter ligne 113 le numéro de la page dans la liste des noms de fichiers de screenshots si une nouvelle page est créée
En soit si j'étais moins flemmard faudrait d'abord trier les gens par taille pour éviter de tout décaler dans le json à chaque fois sinon mdr
"""

def main():
    """Executes the different functions of the file"""
    # Initiates the webdriver
    options = Options()
    driver = webdriver.Chrome(options=options)
    # Go to the height comparator website
    driver.get('https://hikaku-sitatter.com/en/')
    # Gets the JSON data
    with open('liste_taille.json', 'r') as f:
        names_dict = json.load(f)
    # Execute all the functions needed for each page of 10 people in the JSON
    for i in range(len(names_dict)):
        init_and_reset_graph(driver)
        add_10_names_from_json(driver, i)
        take_screenshot(driver, i)

    concatenate_images(driver)
    time.sleep(1)
    driver.quit()

def init_and_reset_graph(driver):
    """Adds someone whose height is 190cm to set the graph at a good scale. Then deletes all the default people
    with random name and height generated by the website + that 190cm person."""
    # Fetches elements needed in the HTML source
    name_textbox = driver.find_element_by_id('name')
    height_textbox = driver.find_element_by_id('height')
    send_button = driver.find_element_by_class_name('addInput__btn')
    # Cross element needed to cleanup the people first
    btn_del = driver.find_elements_by_class_name('btn-del')
    # People cleanup
    for element in btn_del:
        try:
            # Javascript script needed to click on hidden cross element
            driver.execute_script("arguments[0].click();", element)
        except:
            continue
    # Adds 190 cm person
    name_textbox.send_keys("placeHolder")
    height_textbox.send_keys('190')
    send_button.click()
    time.sleep(0.5)
    # Then instantly removes the 190 person (cleanup again)
    btn_del = driver.find_element_by_class_name('btn-del')
    driver.execute_script("arguments[0].click();", btn_del)

def add_10_names_from_json(driver, page_number):
    """"Add 10 people to the website with correct name/height/gender, which is the limit."""
    # Find needed elements
    name_textbox = driver.find_element_by_id('name')
    height_textbox = driver.find_element_by_id('height')
    male_female_buttons = driver.find_elements_by_class_name('addInput-gender__label')
    send_button = driver.find_element_by_class_name('addInput__btn')
    # Loads JSON with names/height/gender, then add them into input fields and adds them one after another
    with open('liste_taille.json', 'r') as f:
        names_dict = json.load(f)
        # Add all the data into text fields then submits, for each person
        for name, list_data in names_dict[f'{page_number}'].items():
            name_textbox.send_keys(name)
            height_textbox.send_keys(list_data[0])
            if list_data[1] == 'm':
                male_female_buttons[0].click()
            else:
                male_female_buttons[1].click()
            send_button.click()
            time.sleep(0.1)

# left 675
# top 1264
# right 1768
# bottom 117

def take_screenshot(driver, page_number):
    """Takes a screenshot of the frame and saves it"""
    # Frame element that we need to screenshot
    frame = driver.find_element_by_class_name('view-scale')
    location = frame.location
    size = frame.size
    full_page_screenshot = driver.get_screenshot_as_png()
    print("Full page screenshot taken")
    im = Image.open(BytesIO(full_page_screenshot))
    print(location)
    print(size)
    # left = 675
    # top = 1264
    # right = 1768
    # bottom = 117
    left = location['x'] + 350
    top = location['y']
    right = location['x'] + size['width'] - 100
    bottom = location['y'] + size['height']

    im = im.crop((left, top, right, bottom))
    im.save(f'screenshot_{page_number}.png')

def concatenate_images(driver):
    images = [Image.open(x) for x in ['screenshot_0.png', 'screenshot_1.png']]
    widths, heights = zip(*(i.size for i in images))
    total_width = sum(widths)
    max_height = max(heights)
    new_im = Image.new('RGB', (total_width, max_height))
    x_offset = 0
    for im in images:
        new_im.paste(im, (x_offset,0))
        x_offset += im.size[0]

    new_im.save('final_image.png')


if __name__ == '__main__':
    main()